#  Copyright (C) Cfengine AS

#  This file is part of Cfengine 3 - written and maintained by Cfengine AS.

#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; version 3.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA

# To the extent this program is licensed as part of the Enterprise
# versions of Cfengine, the applicable Commerical Open Source License
# (COSL) may apply to this file if you as a licensee so wish it. See
# included file COSL.txt.


bundle agent ProcessStuff
   {
   processes:

     "$(procs_list)" 

        signals         => { "stop" , "term" },
        process_count   => match_body,
        process_select  => myfilter;

    # restart now has to refer to an executable rule for the same object

     "jboss.*" 

        restart => "restart_tag"; # opposite of signal

    # In cfengine 3, we have decoupled process and restart (executable)
    # to keep each element "pure". We have added triggers to allow
    # for easier coupling of promises

   commands:

     "/path/joss/run.sh"

            contain  => sandbox;
   }

################################################################

bundle agent Services

{
vars:

  "service" slist => { "apache", "nfsd", "dns" };

  "daemon[apache]" string => "/usr/local/bin/httpd";
  "daemon[nfsd]"   string => "/usr/bin/nfsd";
  "daemon[dns]"    string => "/usr/bin/bind";

  "args[apache]" string => "-user www-run";
  "args[nfsd]"   string => " -4";
  "args[dns]"    string => "";

processes:

  "$(service)" 

      process_count => up("$(service)");

commands:

   "$(daemon[$(service)])"  

      ifvarclass => "$(service)_up",
      args       => "$(args[$(service)])";

# Forgot outside bracks

}

######################
# Parameterized body
######################

body process_count up(s)

{
match_range => "0,10";
out_of_range_define => { "$(s)_up" };
}

################################################################

body number match_body()

{
match_range              => irange("1","5");
in_range_define      => { "okclass" };
out_of_range_define  => { "one", "two", "three" };
}

################################################################

body proc_select myfilter
{
owner       => { "str" };
pid         => "regex";
ppid        => "int";
pgid        => "int";
rsize       => "int";
vsize       => "int";
status      => "regex";
command     => "regex";
ttime_range => "int,int";
stime_range => "int,int";
tty         => "regex";
priority    => "int";
threads     => "int";
process_result  => "string";
}