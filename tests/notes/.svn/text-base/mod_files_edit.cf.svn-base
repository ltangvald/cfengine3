#  Copyright (C) Cfengine AS

#  This file is part of Cfengine 3 - written and maintained by Cfengine AS.

#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; version 3.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA

# To the extent this program is licensed as part of the Enterprise
# versions of Cfengine, the applicable Commerical Open Source License
# (COSL) may apply to this file if you as a licensee so wish it. See
# included file COSL.txt.

######################################################################
#
# File editing
#
# Normal ordering:
# - delete
# - replace | colum_edit
# - insert
# 
######################################################################

bundle edit_line myedit(parameter)
  {
  vars:

   "edit_variable" string => "private edit variable is $(parameter)"; 

#  classes:
#     "no_match" or => NoLineMatching("regex");

  insert_lines:

   "This is an append if no such line example" location => append;

   "This is a prepend if no such line example" location => prepend;

   "/path/filename" location   => append,
                    source_type => "file",  # file,literal
                    expand_vars => "false"; # true is default

  column_edits:

    "$(user):.*"  edit_column => by_number(":","3","210");

    "$(group):.*" edit_column => append_col(",","4","newgroup");

    "mailhost.*" edit_column => set_var("=","smtp-relay.domain.com");
  
  replace_patterns:

    classes::

       "string.[abc]*" 

           replace_with  => sg("$(new_value)","all"); 

       "unwanted lines"

           replace_with => C_comment;

       "/\*Known string\*/"

           replace_with => C_uncomment;


  delete_lines:

    # matching
    "$(var).*";   # starting
    ".*$(var).*"; # containing
    
  }

######################################################################
# Bodies
########################################

body replace_with s(pattern,policy)

{
replace_value => "$(pattern)";
occurrences => "first";
}

########################################

body replace_with sg(pattern,policy)

{
replace_value => "$(pattern)";
occurrences => "all";  # first, last all
}

########################################

body replace_with C_comment

{
replace_value => "/* $(this.match[0]) */"; # backreference 0
occurrences => "all";  # first, last all
}

########################################

body replace_with C_uncomment

{
replace_value => "$(this.match[0])"; # backreference 0
occurrences => "all";  # first, last all
}

########################################

body line_insert append

{
line_location => "end"; # start, end, first, last, all
}

########################################

body line_insert prepend

{
line_location => "start"; # start, end, first, last, all
}

########################################

body set_column by_number(split,col,newval)

{
column_separator     => "$(split)";
select_column => "$(col)";
column_value  => "$(newval)";
}

########################################

body edit_column append_col(split,col,newval)

{
column_separator => "$(split)";
select_column    => "$(col)";
value_separator  => ",";
append_value     => "$(newval)";
# prepend
# insert_alphabetically
# insert_after
}

########################################

body set_column set_var(split,newval)

{
column_separator => "$(split)";
select_column    => "2";
column_value     => "$(newval)";
}
