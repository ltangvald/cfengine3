#########################################################
#
# files module
#
#########################################################

bundle agent filetest()
   {
   vars:

      "filelist" slist => { "/tmp/bla1", "/tmp/bla2" };

      "limit_size" int => "46m";

   files:

      "/path/file.*" -> "me"

            pathtype     => "regex",
            perms        => myperms,
            file_select  => myfilter,
            changes      => tripwire,
            depth_search => recurse("2");

    stupid_faculty::

      "$(filelist)"

              ref    => "Every promise may have an id or explanation to refer by",
           perms     => myperms ,
           perms     => others("fish"); # ("white");

      "/etc/xyz" -> "cfagent"     # create a file

            create    => "true",
            touch     => "true",
            perms    => myperms;

      "/etc/abc/." -> "cfagent"   # create a directory

            create    => "true",
            perms    => myperms;

      "/usr/local"    

            link_from     => linkdetails("/site/mountpoint/local");

      "/usr/local/dir_of_links"    

            link_from     => link_with_override("/site/mountpoint/local/sourcedir");


      "/var" 

            depth_search => recurse("inf"),
            delete       => tidypolicy,    # combined with file_select now
            rename       => rotateme,
            repository   => "/override";
   }

#########################################################

body depth_search recurse(d)

{
depth        => "$(d)";
include_dirs => { ".*.exe", ".*.com" };
}

#########################################################
#
# Editfiles in not yet specified
#

bundle edit_line myedit(filename)
  {
  classes:

  append:

      "My important line.*" 

           data        => "New important line" ,
           policy      => IfNoSuchLine,
           transaction => controlbody("my message");

  append:

     "This a line in $(filename)" ;
  
  replace:

   classes::

       "string.[abc]*" 

           with    => "$(new_value)" ,
           which   => all ,
           classes => afterX;  trigger ordering

  }

#########################################################

body perms others(parame)

{
milkyway::

owners  => { "root", "wheel", "sudo" };
}

#########################################################

body perms myperms()

{
any::

  mode  => "+077,-02";
  owners => { "mark","siri" };

solaris::

  #groups => { readstringlist("filename","#.*","[\n]","1000") };

linux::

  groups => { "root", "wheel" };
}

#########################################################

body linkfrom linkdetails(tofile)

{
source        => "$(tofile)";
link_type     => "symlink";
when_no_file  => "force";      # kill
}

#########################################################

body linkfrom link_with_override(tofile)

{
source        => "$(tofile)";
link_type     => "symlink";          # /absolute/abs/hard/relative/rel
when_no_file  => "force";             # kill
link_children => "true";
}

#########################################################

body transaction controlbody

{
log_level    => "error";
report_level => "inform";
ifelapsed   => "10";
expireafter => "20";
}

#########################################################

body changes tripwire

{
hash    => "md5";
update  => "yes";
}

#########################################################

body file_select myfilter

#
# we can build old "include", "exclude", and "ignore" from these
# as standard patterns
#

{
leaf_name => { ".*.asc" };                   # regex matching file name
path_name => { "/var/.*/mail", "/usr/.*/mail" };

search_mode      =>  "700";
#search_size      =>  irange("10000","10000000");
search_size      =>  irange("10000","$(filetest.limit_size)");

search_owners     =>  { "mark", "cell", "motd" };
search_groups     =>  { "ecg", "mark" };

ctime     => irange(on(2000,1,1,0,0,0),now);
mtime     => irange(ago(1,0,0,2,30,0),now);  
atime     => irange(on(1997,2,22,0,0,0),now);

exec_regex  => "/usr/bin/file $(this.file) (.*ascii.*)";
filetypes   => { "dir", "symlink" };
issymlinkto => { "/dev/null", "/dev/tyyS0"};
file_result => "type&mode"; 
}

#########################################################

body delete tidypolicy

{
dirlinks => "delete";          #keep/tidy/delete
rmdirs   => "true";             #none/all/sub
}

#########################################################

body rename rotateme

{
newname => "filename";
rotate => "4"; # 0 means empty file
}


