#######################################################
#
# Ensure that the transformer runs for every file in a recursive tree
#
#######################################################

body common control
{
  inputs => { "../../default.cf" };
  bundlesequence  => { "g", default("$(this.promise_filename)") };   
  version => "1.0";
nova_edition::
  host_licenses_paid => "5";
}

bundle common g
{
vars:
	"testdir" string => "/tmp/TEST.cfengine";
	#
	# This extracts the octal mode, and decimal nlink, uid, gid, size
	"command" string => 'printf "%#o" . " %d" x 4, (stat("$(g.testfile)"))[2]&07777, (stat(_))[3..5,7]';

	"source" string => "/etc/group";
	"source_command" string => 'printf "%d", (stat("$(g.source)"))[7]';
	"source_size" string => execresult(
	    "/usr/bin/perl -le '$(g.source_command)'",
	    "noshell");
}

#######################################################

bundle agent init
{
vars:
    any::
	"files" slist => { "1", "2", "3" };
    bin_gzip::
	"gzip" string => "/bin/gzip",
	    policy => "free";
    usr_bin_gzip::
	"gzip" string => "/usr/bin/gzip",
	    policy => "free";

classes:
    "bin_gzip" expression => fileexists("/bin/gzip");
    "usr_bin_gzip" expression => fileexists("/usr/bin/gzip");

files:
	"$(g.testdir)/."
	    create => "true";

	"$(g.testdir)/$(files)"
	    copy_from => init_copy("/etc/group");
}

body copy_from init_copy(file)
{
	source => "$(file)";
}

body classes init_set_class(class)
{
promise_kept => { "$(class)" };
promise_repaired => { "$(class)" };
}

#######################################################

bundle agent test
{
files:
	"$(g.testdir)"
	    transformer => "$(init.gzip) $(this.promiser)",
	    file_select => test_plain,
	    depth_search => test_recurse;
}

body file_select test_plain
{
	file_types => { "plain" };
	file_result => "file_types";
}

body depth_search test_recurse
{
	depth => "inf";
}

#######################################################

bundle agent check
{
vars:
	"files" slist => { @{init.files} };

classes:
	"ok$(files)" expression => fileexists("$(g.testdir)/$(files).gz");
	"ok" and => { "ok1", "ok2", "ok3" };

reports:
    DEBUG::
	"$(g.testdir)/$(files).gz exists as expected"
	    ifvarclass => "ok$(files)";
	"$(g.testdir)/$(files).gz was not created!"
	    ifvarclass => "!ok$(files)";
    ok::
	"$(this.promise_filename) Pass";
    MAIN.ok::
	"$(this.promise_filename) Pass"
		report_to_file => "$(G.logfile)";
    !ok::
	"$(this.promise_filename) FAIL";
    MAIN.!ok::
	"$(this.promise_filename) FAIL"
		report_to_file => "$(G.logfile)";
}

#######################################################

bundle agent fini
{
methods:
	"any" usebundle => default_fini("$(g.testdir)");
}
