#######################################################
#
# Test that copying file by relative symlink works
#
#######################################################

body common control
{
  inputs => { "../../default.cf" };
  bundlesequence  => { "g", default("$(this.promise_filename)") };   
  version => "1.0";
nova_edition::
  host_licenses_paid => "5";
}

bundle common g
{
vars:
	"testdir" string => "/tmp/TEST.cfengine";

	# This extracts the octal mode, and decimal nlink, uid, gid, size
	"command" string => 'printf "%o" . " %d" x 4, (stat("$(g.testdir)/copy_file"))[2]&07777, (stat(_))[3..5,7]';
}

#######################################################

bundle agent init
{
files:
    "$(g.testdir)/linkdir/" 
      comment => "Create a directory.";
    "$(g.testdir)/linkdir/another/" 
      comment => "Create another directory.";
    "$(g.testdir)/linkdir/another/target" 
      comment => "A target file.",
      create => "true";
    "$(g.testdir)/linkdir/link"
      comment => "Create a relative link to the target.",
      link_from => ln_s("$(g.testdir)/linkdir/another/target");
}

#######################################################

bundle agent test
{
files:
    "$(g.testdir)/copy_file"
      comment => "Copy the file behind the link.",
      copy_from => cp_2_file("$(g.testdir)/linkdir/link");
}

body link_from ln_s(x) {
  link_type => "relative";
  source => "$(x)";
  when_no_source => "nop";
}

body copy_from cp_2_file(x) {
  source => "$(x)";
  compare => "binary";
  copy_backup => "false";
  copylink_patterns => { ".*" };
}

#######################################################

bundle agent check
{
vars:
        "expect" string => "600 1 0 0 0";

        "result" string => execresult(
            "/usr/bin/perl -le '$(g.command)'", "noshell");
classes:
	"ok" expression => strcmp("$(expect)", "$(result)");

reports:
    DEBUG::
	"expected: '$(expect)'";
	"got:      '$(result)'";
    ok::
	"$(this.promise_filename) Pass";
    MAIN.ok::
	"$(this.promise_filename) Pass"
		report_to_file => "$(G.logfile)";
    !ok::
	"$(this.promise_filename) FAIL";
    MAIN.!ok::
	"$(this.promise_filename) FAIL"
		report_to_file => "$(G.logfile)";
}

#######################################################

bundle agent fini
{
methods:
	"any" usebundle => default_fini("$(g.testdir)");
}
