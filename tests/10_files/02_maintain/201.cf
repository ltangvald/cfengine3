#######################################################
#
# Copy a file, then ensure that subsequent create=true doesn't
# overwrite mode, size
#
#######################################################

body common control
{
  inputs => { "../../default.cf" };
  bundlesequence  => { "g", default("$(this.promise_filename)") };   
  version => "1.0";
nova_edition::
  host_licenses_paid => "5";
}

bundle common g
{
vars:
	"testfile" string => "/tmp/TEST.cfengine";
	#
	# This extracts the octal mode, and decimal nlink, uid, gid, size
	"command" string => 'printf "%o" . " %d" x 4, (stat("$(g.testfile)"))[2]&07777, (stat(_))[3..5,7]';
}

#######################################################

bundle agent init
{
vars:
    any::
	"mode" int => "01751";

    pass2::
	"result" string => execresult(
	    "/usr/bin/perl -le '$(g.command)'",
	    "noshell");

files:
	"$(g.testfile)"
	    copy_from => init_copy("/etc/group"),
	    perms => init_perms("$(mode)"),
	    classes => init_set_class("pass2");
}

body copy_from init_copy(file)
{
	source => "$(file)";
}

body perms init_perms(m)
{
mode => "$(m)";
}


body classes init_set_class(class)
{
promise_kept => { "$(class)" };
promise_repaired => { "$(class)" };
}

#######################################################

bundle agent test
{

files:
	"$(g.testfile)"
	    create => "true",
	    perms => test_perms("$(init.mode)");
}

body perms test_perms(m)
{
mode => "$(m)";
}


#######################################################

bundle agent check
{
vars:
	"result" string => execresult(
	    "/usr/bin/perl -le '$(g.command)'",
	    "noshell");

classes:
	"ok" expression => strcmp("$(init.result)", "$(result)");

reports:
    DEBUG::
	"init.result  is '$(init.result)'";
	"check.result is '$(result)'";
    ok::
	"$(this.promise_filename) Pass";
    !ok::
	"$(this.promise_filename) FAIL";
}

#######################################################

bundle agent fini
{
methods:
	"any" usebundle => default_fini("$(g.testfile)");
}
