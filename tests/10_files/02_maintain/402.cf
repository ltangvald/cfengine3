#######################################################
#
# 
#
#######################################################

body common control
{
  inputs => { "../../default.cf" };
  bundlesequence  => { "g", default("$(this.promise_filename)") };   
  version => "1.0";
nova_edition::
  host_licenses_paid => "5";
}

body agent control
{
  default_repository => "/var/tmp";
}

bundle common g
{
vars:
	"testfile" string => "/tmp/TEST.cfengine";
	"repofile" string => "_tmp_TEST.cfengine";
	"repo" string => "/var/tmp";
}

#######################################################

bundle agent init
{
files:
	"$(g.repofile).*"
	    delete => init_delete;

	"$(g.testfile).*"
	    delete => init_delete;

	"$(g.testfile)"
	    move_obstructions => "true",
	    copy_from => init_copy;
}

body copy_from init_copy
{
	source => "/etc/group";
	compare => "digest";
}

body delete init_delete
{
	dirlinks => "delete";
	rmdirs   => "true";
}

#######################################################

bundle agent test
{
files:
	"$(g.testfile)"
	    move_obstructions => "true",
	    copy_from => test_copy;
}

body copy_from test_copy
{
	source => "/etc/motd";
	compare => "digest";
}

#######################################################

bundle agent check
{
classes:
    "test" not => fileexists("$(g.testfile).cfsaved");
    "repo" expression => fileexists("$(g.repo)/$(g.repofile).cfsaved");
    "ok" and => { "test", "repo" };

reports:
    DEBUG::
	"testfile = $(g.testfile)";
	"repo = $(g.repo)";
	"repofile = $(g.repofile)";
    ok::
	"$(this.promise_filename) Pass";
    MAIN.ok::
	"$(this.promise_filename) Pass"
		report_to_file => "$(G.logfile)";
    !ok::
	"$(this.promise_filename) FAIL";
    MAIN.!ok::
	"$(this.promise_filename) FAIL"
		report_to_file => "$(G.logfile)";
}

#######################################################

bundle agent fini
{
methods:
	"any" usebundle => default_fini("$(g.testfile)");
	"any" usebundle => default_fini("$(g.repofile)");
}
